// 1. Створення базового об'єкту "Book":
/*
 * Об'єкт: Book
 * Властивості:
 * ----------------------------------
 * | Властивість | Значення         |
 * |-------------|------------------|
 * | title       | "Загальна Книга" |
 * | author      | "Анонім"         |
 * | pages       | 0                |
 *
 * Функції:
 * ------------------------------------------------------------------------
 * | Функція    | Опис                                                    |
 * -----------------------------------------------------------------------
 * | read()     | Виводить повідомлення "Ви читаєте <title> від <author>" |
 */
// Оголошення класу Book
class Book {
    // Конструктор класу
    constructor(title = "Загальна Книга", author = "Анонім", pages = 0) {
        this.title = title;  // Назва книги
        this.author = author;  // Автор книги
        this.pages = pages;  // Кількість сторінок
    }

    // Метод read() для відтворення повідомлення
    read() {
        console.log(`Ви читаєте ${this.title} від ${this.author}`);
    }
}
// Створюємо об'єкт Book
const myBook = new Book();
console.log("Завдання: 1 ==============================");

// Виводимо в консоль Об'єкт: Book
console.log("Об'єкт: Book", myBook);
// Виводимо в консоль прототип Об'єкту: Book
console.log("Прототип об'єкту: Book", Object.getPrototypeOf(myBook));
// Викликаємо функцію read об'єкту Book
myBook.read();
// 2. Наслідування від базового об'єкту Book

/*
 * Об'єкт: Novel
 * Властивості та функції наслідуються від об'єкта Book
 * Додаємо нову властивість
 *  | Властивість | Значення |
 *  |-------------|----------|
 *  | genre       | "Новела" |
 */
// Оголошення класу Novel, який успадковує клас Book
class Novel extends Book {
    // Конструктор класу Novel
    constructor(title, author, pages, genre = "Новела") {
        // Викликаємо конструктор базового класу Book з параметрами
        super(title, author, pages);
        this.genre = genre;  // Додаємо нову властивість genre
    }
}
// Створюємо об'єкт Novel, наслідуємо властивості і функції від об'єкта Book
const myNovel = new Novel("Пригоди", "Джон Доу", 300);
// Додаємо властивість genre

console.log("Завдання: 2 ==============================");

// Виводимо в консоль Об'єкт: Novel
console.log("Об'єкт: Novel", myNovel);
// Виводимо в консоль прототип Об'єкту: Novel
console.log("Прототип об'єкту: Novel", Object.getPrototypeOf(myNovel));
// 3. Створення нового об'єкту та зміна його прототипу

/*
 * Об'єкт: Biography
 * Властивості:
 * --------------------------------------
 * | Властивість | Значення             |
 * |-------------|----------------------|
 * | title       | "Загальна Біографія" |
 * | author      | "Біограф"            |
 * | pages       | 200                  |
 */
// Оголошення класу Biography
class Biography {
    // Конструктор класу
    constructor(title = "Загальна Біографія", author = "Біограф", pages = 200) {
        this.title = title;  // Назва біографії
        this.author = author;  // Автор біографії
        this.pages = pages;  // Кількість сторінок
    }
}
// Створюємо об'єкт Biography
const myBiography = new Biography();
// Виводимо в консоль об'єкт Biography
console.log("Об'єкт: Biography", myBiography);
// Змінемо прототип об'єкта Biography на Novel
Object.setPrototypeOf(myBiography, Novel.prototype);
console.log("Завдання: 3 ==============================");
// Виводимо в консоль Об'єкт: Biography

// Перевіримо чи являється Novel прототипом Biography та виведемо в консоль
console.log("Novel є прототипом Biography?", Object.getPrototypeOf(myBiography) === Novel.prototype);
// 4. Інкапсуляція властивості та додання властивості
/*
 * Об'єкт: ScienceBook
 * Властивості та функції наслідуються від об'єкта Book
 * Також тут використовується інкапсуляція для створення властивості 'info', яка не може бути змінена напряму, а лише змінюється за допомогю гетера
 */

// Створюємо ScienceBook, наслідуємо властивості і функції від об'єкта Book
class ScienceBook {
    constructor(title = "Фізика 101", author = "Альберт Ейнштейн") {
        this.title = title;  // Назва книги
        this.author = author;  // Автор книги
        this._info = "написана в 1915 році";  // Інформація про книгу (інкапсульована властивість)
    }
    // Гетер для властивості info
    get info() {
        return `Про книгу ${this.title}: ${this._info}`;
    }
     // Сетер для властивості info (який нічого не робить, але може бути корисний для розширення)
     set info(newInfo) {
        console.log("Звернення до сетера info");
        // Виконуємо додаткові дії перед присвоєнням нового значення
    }
}
console.log("Завдання: 4 ==============================");

// Створюємо об'єкт ScienceBook
const myScienceBook = new ScienceBook();

// Виводимо в консоль властивість info
console.log("Властивість info:", myScienceBook.info);
// Виводимо в консоль налаштування властивости info
myScienceBook.info = "нове значення";

// 5. Поліморфізм: створення нового об'єкта та перевизначення його методу
/*
 * Об'єкт: Textbook
 * Властивості та функції наслідуються від об'єкта ScienceBook
 * Метод read() перевизначено для демонстрації поліморфізму,
 * має виводити "Ви читаєте підручник "<title>" від <author>. <info>"
 */
// Оголошення класу Textbook, який успадковує властивості та методи від класу ScienceBook
class Textbook extends ScienceBook {
    constructor(title = "Фізика у Вищій Школі", author = "Дж. Д. Джонс") {
        super(title, author); // Викликаємо конструктор батьківського класу
    }

    // Перевизначення методу read для демонстрації поліморфізму
    read() {
        console.log(`Ви читаєте підручник "${this.title}" від ${this.author}. ${this._info}`);
    }
}
//Створюємо Textbook та наслідуємо властивості з ScienceBook
const myTextbook = new Textbook();
// Перевизначаємо метод read(), відповідно з дописом вище

// Встановлюємо значення для Textbook
// | Властивість | Значення                   |
// |-------------|----------------------------|
// | title       | "Фізика у Вищій Школі"     |
// | author      | "Дж. Д. Джонс"             |

console.log("Завдання: 5 ==============================");
// Викликаємо функцію read об'єкту Textbook
myTextbook.read();

// 6. Абстракція: створення об'єкта з загальними властивостями
/*
 * Об'єкт: Media
 * Властивості:
 * --------------
 * | Властивість | Значення           |
 * |-------------|--------------------|
 * | format      | "Загальний Формат" |
 * | length      | 0                  |
 *
 * Функції:
 * ---------------------------------------------------------------------------------------------------------------
 * | Функція | Опис                                                                                              |
 * |---------|---------------------------------------------------------------------------------------------------|
 * | play()  | Виводить повідомлення "Зараз відтворюється медіа у форматі <format> з тривалістю <length> секунд" |
 */

// Створюємо об'єкт Media
class Media {
    constructor(format = "Загальний Формат", length = 0) {
        this.format = format;
        this.length = length;
    }

    // Метод play для відтворення медіа
    play() {
        console.log(`Зараз відтворюється медіа у форматі ${this.format} з тривалістю ${this.length} секунд`);
    }
}

/*
 * Об'єкт: Song
 * Властивості та функції наслідуються від об'єкта Media
 * Додаткові властивості: artist, title
 */
class Song extends Media {
    constructor(artist = "Загальний Виконавець", title = "Загальна Пісня", format = "Загальний Формат", length = 0) {
        super(format, length); // Виклик конструктора батьківського класу
        this.artist = artist;
        this.title = title;
    }
}
// Створюємо об'єкт Song, наслідуємо властивості і функції від об'єкта Media
const mySong = new Song();
// Встановлюємо додаткові властивості
// | Властивість | Значення               |
// |-------------|------------------------|
// | artist      | "Загальний Виконавець" |
// | title       | "Загальна Пісня"       |

console.log("Завдання: 6 ==============================");
// Викликаємо функцію play об'єкту Song
mySong.play();